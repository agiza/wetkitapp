<?php

/**
 * @file
 * Allows entity form submitting and editing in modal window.
 *
 * @example
 * Load link with l() function to create:
 * <a href="/modal/entityform/FORM_TYPE/nojs" class="ctools-use-modal">Submit and reload the page</a>
 * or
 * <a href="/modal/entityform/FORM_TYPE/nojs/0" class="ctools-use-modal">Submit without page reloading</a>.
 * or
 * <a href="/modal/entityform/SUBMISSION_ID/edit/nojs" class="ctools-use-modal">Edit submission and reload the page</a>
 * or
 * <a href="/modal/entityform/SUBMISSION_ID/edit/nojs/0" class="ctools-use-modal">Edit submission without page reloading</a>.
 *
 * Ensure page loading above link has the following functions called:
 * ctools_include('modal');
 * ctools_modal_add_js();
 */

/**
 * Implements hook_menu().
 */
function modal_entityform_menu() {
  $items['modal/entityform/%entityform_empty/%ctools_js'] = array(
    'title' => 'Submit',
    'page callback' => 'modal_entityform_page_submit',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  );

  $items['modal/entityform/%entityform/edit/%ctools_js'] = array(
    'title' => 'Edit',
    'page callback' => 'modal_entityform_page_edit',
    'page arguments' => array(2, 4),
    'access callback' => TRUE,
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function modal_entityform_access($op, $entityform) {
  if (!entityform_access($op, $entityform)) {
    return FALSE;
  }
  $rule_result = entityform_invoke_rules($entityform, 'access_rules');
  return _entityform_rules_all_pass($rule_result);
}

/**
 * Modal Entityform add page callback.
 */
function modal_entityform_page_submit($entityform, $js, $force_page_reload = TRUE) {
  // Fall back if $js is not set.
  if (!$js) {
    drupal_goto('eform/submit/' . $entityform->type, array('query' => drupal_get_query_parameters()));
    return;
  }

  ctools_include('modal');
  ctools_include('ajax');

  $entityform_type_entity = entityform_type_load($entityform->type);

  if (!modal_entityform_access('submit', $entityform)) {
    $commands = array(ctools_modal_command_display(t('Access denied'), t('You are not authorized to access this page.')));
    drupal_alter('modal_entityform_submit_access_denied', $commands, $entityform_type_entity, $entityform);
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  $title = $entityform_type_entity->label;
  drupal_alter('modal_entityform_submit_title', $title, $entityform_type_entity);

  return modal_entityform_form($entityform, $title, $entityform_type_entity, $force_page_reload);
}

/**
 * Modal Entityform edit page callback.
 */
function modal_entityform_page_edit($entityform, $js, $force_page_reload = TRUE) {
  // Fall back if $js is not set.
  if (!$js) {
    drupal_goto('entityform/' . $entityform->entityform_id . '/edit', array('query' => drupal_get_query_parameters()));
    return;
  }

  ctools_include('modal');
  ctools_include('ajax');

  $entityform_type_entity = entityform_type_load($entityform->type);

  if (!modal_entityform_access('edit', $entityform)) {
    $commands = array(ctools_modal_command_display(t('Access denied'), t('You are not authorized to access this page.')));
    drupal_alter('modal_entityform_edit_access_denied', $commands, $entityform_type_entity, $entityform);
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  $title = $entityform_type_entity->label;
  drupal_alter('modal_entityform_edit_title', $title, $entityform_type_entity, $entityform);

  return modal_entityform_form($entityform, $title, $entityform_type_entity, $force_page_reload);
}

/**
 * Build the Modal Entityform Form.
 *
 * @param string $entityformtype
 *   Entityform type machine name.
 * @param string $title
 *   The Modal Popup Title.
 * @param boolean $force_page_reload
 *   Indicates if page should be reloaded after form submission.
 */
function modal_entityform_form($entityform, $title, $entityform_type_entity, $force_page_reload = FALSE) {
  ctools_include('entityform.admin', 'entityform', '');
  $form_state = array(
    'title' => $title,
    'ajax'  => TRUE,
    'modal_edit'  => TRUE, // This property can be used in hook_form_alter() to separate modal and full-page forms.
    'build_info' => array(
      'args'  => array($entityform, 'submit'),
    ),
  );

  $extra_commands = array();
  drupal_alter('modal_entityform_edit', $extra_commands, $entityform_type_entity, $entityform);

  $commands = array_merge(ctools_modal_form_wrapper('entityform_edit_form', $form_state), $extra_commands);

  if (!empty($form_state['executed']) && empty($form_state['rebuild'])) {
    ctools_add_js('ajax-responder');
    $commands[] = ctools_modal_command_dismiss();
    $modal_commands = array();
    if (module_exists('modal_messages')) {
      $modal_commands = modal_messages_get_as_ajax_commands($force_page_reload);
    }
    if (!empty($modal_commands)) {
      foreach ($modal_commands as $command) {
        $commands[] = $command;
      }
    }
    elseif ($force_page_reload) {
      if (isset($_GET['destination'])) {
        $commands[] = ctools_ajax_command_redirect($_GET['destination']);
      }
      else {
        $commands[] = ctools_ajax_command_reload();
      }
    }
    if (isset($_GET['destination'])) {
      $commands[] = ctools_ajax_command_redirect($_GET['destination']);
    }
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}
